lexer grammar ImpalaLexerInternal;

options {
    tokenVocab = predefined;
}

KW_AND: '&&' | 'AND';
KW_ADD: 'ADD';
KW_AGGREGATE: 'AGGREGATE';
KW_ALL: 'ALL';
KW_ALTER: 'ALTER';
KW_ANALYTIC: 'ANALYTIC';
KW_ANTI: 'ANTI';
KW_API_VERSION: 'API_VERSION';
KW_ARRAY: 'ARRAY';
KW_AS: 'AS';
KW_ASC: 'ASC';
KW_AUTHORIZATION: 'AUTHORIZATION';
KW_AVRO: 'AVRO';
KW_BETWEEN: 'BETWEEN';
KW_BIGINT: 'BIGINT';
KW_BINARY: 'BINARY';
KW_BLOCKSIZE: 'BLOCK_SIZE';
KW_BOOLEAN: 'BOOLEAN';
KW_BY: 'BY';
KW_CACHED: 'CACHED';
KW_CASCADE: 'CASCADE';
KW_CASE: 'CASE';
KW_CAST: 'CAST';
KW_CHANGE: 'CHANGE';
KW_CHAR: 'CHAR';
KW_CLASS: 'CLASS';
KW_CLOSE_FN: 'CLOSE_FN';
KW_COLUMN: 'COLUMN';
KW_COLUMNS: 'COLUMNS';
KW_COMMENT: 'COMMENT';
KW_COMPRESSION: 'COMPRESSION';
KW_COMPUTE: 'COMPUTE';
KW_CONSTRAINT: 'CONSTRAINT';
KW_COPY: 'COPY';
KW_CREATE: 'CREATE';
KW_CROSS: 'CROSS';
KW_CUBE: 'CUBE';
KW_CURRENT: 'CURRENT';
KW_DATA: 'DATA';
KW_DATABASE: 'DATABASE';
KW_DATABASES: 'DATABASES';
KW_DATE: 'DATE';
KW_DATETIME: 'DATETIME';
KW_DECIMAL: 'DECIMAL';
KW_DEFAULT: 'DEFAULT';
KW_DELETE: 'DELETE';
KW_DELIMITED: 'DELIMITED';
KW_DESC: 'DESC';
KW_DESCRIBE: 'DESCRIBE';
KW_DISABLE: 'DISABLE';
KW_DISTINCT: 'DISTINCT';
KW_DIV: 'DIV';
KW_DOUBLE: 'DOUBLE' | 'REAL';
KW_DROP: 'DROP';
KW_ELSE: 'ELSE';
KW_ENABLE: 'ENABLE';
KW_ENCODING: 'ENCODING';
KW_END: 'END';
KW_ESCAPED: 'ESCAPED';
KW_EXCEPT: 'EXCEPT';
KW_EXISTS: 'EXISTS';
KW_EXPLAIN: 'EXPLAIN';
KW_EXTENDED: 'EXTENDED';
KW_EXTERNAL: 'EXTERNAL';
KW_FALSE: 'FALSE';
KW_FIELDS: 'FIELDS';
KW_FILEFORMAT: 'FILEFORMAT';
KW_FILES: 'FILES';
KW_FINALIZE_FN: 'FINALIZE_FN';
KW_FIRST: 'FIRST';
KW_FLOAT: 'FLOAT';
KW_FOLLOWING: 'FOLLOWING';
KW_FOR: 'FOR';
KW_FOREIGN: 'FOREIGN';
KW_FORMAT: 'FORMAT';
KW_FORMATTED: 'FORMATTED';
KW_FROM: 'FROM';
KW_FULL: 'FULL';
KW_FUNCTION: 'FUNCTION';
KW_FUNCTIONS: 'FUNCTIONS';
KW_GRANT: 'GRANT';
KW_GROUP: 'GROUP';
KW_GROUPING: 'GROUPING';
KW_HASH: 'HASH';
KW_HAVING: 'HAVING';
KW_HUDIPARQUET: 'HUDIPARQUET';
KW_ICEBERG: 'ICEBERG';
KW_IF: 'IF';
KW_IGNORE: 'IGNORE';
KW_ILIKE: 'ILIKE';
KW_IN: 'IN';
KW_INCREMENTAL: 'INCREMENTAL';
KW_INIT_FN: 'INIT_FN';
KW_INNER: 'INNER';
KW_INPATH: 'INPATH';
KW_INSERT: 'INSERT';
KW_INT: 'INT' | 'INTEGER';
KW_INTERMEDIATE: 'INTERMEDIATE';
KW_INTERSECT: 'INTERSECT';
KW_INTERVAL: 'INTERVAL';
KW_INTO: 'INTO';
KW_INVALIDATE: 'INVALIDATE';
KW_IREGEXP: 'IREGEXP';
KW_IS: 'IS';
KW_JOIN: 'JOIN';
KW_KUDU: 'KUDU';
KW_LAST: 'LAST';
KW_LEFT: 'LEFT';
KW_LEXICAL: 'LEXICAL';
KW_LIKE: 'LIKE';
KW_LIMIT: 'LIMIT';
KW_LINES: 'LINES';
KW_LOAD: 'LOAD';
KW_LOCATION: 'LOCATION';
KW_MANAGED_LOCATION: 'MANAGEDLOCATION';
KW_MAP: 'MAP';
KW_MERGE_FN: 'MERGE_FN';
KW_METADATA: 'METADATA';
KW_MINUS: 'MINUS';
KW_NORELY: 'NORELY';
KW_NOT: 'NOT';
KW_NOVALIDATE: 'NOVALIDATE';
KW_NULL: 'NULL';
KW_NULLS: 'NULLS';
KW_OFFSET: 'OFFSET';
KW_ON: 'ON';
KW_OR: 'OR';
KW_LOGICAL_OR: '||';
KW_ORC: 'ORC';
KW_ORDER: 'ORDER';
KW_OUTER: 'OUTER';
KW_OVER: 'OVER';
KW_OVERWRITE: 'OVERWRITE';
KW_PARQUET: 'PARQUET';
KW_PARQUETFILE: 'PARQUETFILE';
KW_PARTITION: 'PARTITION';
KW_PARTITIONED: 'PARTITIONED';
KW_PARTITIONS: 'PARTITIONS';
KW_PRECEDING: 'PRECEDING';
KW_PREPARE_FN: 'PREPARE_FN';
KW_PRIMARY: 'PRIMARY';
KW_PRODUCED: 'PRODUCED';
KW_PURGE: 'PURGE';
KW_RANGE: 'RANGE';
KW_RCFILE: 'RCFILE';
KW_RECOVER: 'RECOVER';
KW_REFERENCES: 'REFERENCES';
KW_REFRESH: 'REFRESH';
KW_REGEXP: 'REGEXP';
KW_RELY: 'RELY';
KW_RENAME: 'RENAME';
KW_REPEATABLE: 'REPEATABLE';
KW_REPLACE: 'REPLACE';
KW_REPLICATION: 'REPLICATION';
KW_RESTRICT: 'RESTRICT';
KW_RETURNS: 'RETURNS';
KW_REVOKE: 'REVOKE';
KW_RIGHT: 'RIGHT';
KW_RLIKE: 'RLIKE';
KW_ROLE: 'ROLE';
KW_ROLES: 'ROLES';
KW_ROLLUP: 'ROLLUP';
KW_ROW: 'ROW';
KW_ROWS: 'ROWS';
KW_SCHEMA: 'SCHEMA';
KW_SCHEMAS: 'SCHEMAS';
KW_SELECT: 'SELECT';
KW_SEMI: 'SEMI';
KW_SEQUENCEFILE: 'SEQUENCEFILE';
KW_SERDEPROPERTIES: 'SERDEPROPERTIES';
KW_SERIALIZE_FN: 'SERIALIZE_FN';
KW_SET: 'SET';
KW_SETS: 'SETS';
KW_SHOW: 'SHOW';
KW_SMALLINT: 'SMALLINT';
KW_SORT: 'SORT';
KW_SPEC: 'SPEC';
KW_STATS: 'STATS';
KW_STORED: 'STORED';
KW_STRAIGHT_JOIN: 'STRAIGHT_JOIN';
KW_STRING: 'STRING';
KW_STRUCT: 'STRUCT';
KW_SYMBOL: 'SYMBOL';
KW_TABLE: 'TABLE';
KW_TABLES: 'TABLES';
KW_TABLESAMPLE: 'TABLESAMPLE';
KW_TBLPROPERTIES: 'TBLPROPERTIES';
KW_TERMINATED: 'TERMINATED';
KW_TEXTFILE: 'TEXTFILE';
KW_THEN: 'THEN';
KW_TIMESTAMP: 'TIMESTAMP';
KW_TINYINT: 'TINYINT';
KW_TO: 'TO';
KW_TRUE: 'TRUE';
KW_TRUNCATE: 'TRUNCATE';
KW_UNBOUNDED: 'UNBOUNDED';
KW_UNCACHED: 'UNCACHED';
KW_UNION: 'UNION';
KW_UNKNOWN: 'UNKNOWN';
KW_UNSET: 'UNSET';
KW_UPDATE: 'UPDATE';
KW_UPDATE_FN: 'UPDATE_FN';
KW_UPSERT: 'UPSERT';
KW_USE: 'USE';
KW_USING: 'USING';
KW_VALIDATE: 'VALIDATE';
KW_VALUES: 'VALUES';
KW_VARCHAR: 'VARCHAR';
KW_VIEW: 'VIEW';
KW_WHEN: 'WHEN';
KW_WHERE: 'WHERE';
KW_WITH: 'WITH';
KW_ZORDER: 'ZORDER';

// Order of rules to resolve ambiguity:
// The rule for recognizing integer literals must come before the rule for
// double literals to, e.g., recognize "1234" as an integer literal.
// The rule for recognizing double literals must come before the rule for
// identifiers to, e.g., recognize "1e6" as a double literal.
IntegerLiteral: DIGIT+;
fragment FLit1: [0-9]+ '.' [0-9]*;
fragment FLit2: '.' [0-9]+;
fragment FLit3: [0-9]+;
fragment Exponent: ('e' | 'E')? ('+' | '-')? [0-9]+;
DecimalLiteral: (FLit1 | FLit2 | FLit3) Exponent?;

fragment DIGIT: [0-9];
fragment LETTER: [a-zA-Z\u0080-\u00FF_];
fragment LETTER_OR_DIGIT: LETTER | DIGIT;

fragment Identifier: DIGIT* LETTER LETTER_OR_DIGIT*;
fragment IdentifierOrKw: Identifier | '.' Identifier | '&&' | '||';

STRING_LITERAL
    : '`' ('\\' . | ~[\\`])*? '`'
    | '\'' ('\\' . | ~[\\'])*? '\''
    | '"' ('\\' . | ~[\\"])*? '"'
    ;

// Put '...' before '.'
DOTDOTDOT: '...';

// single-character tokens
COLON: ':';
SEMICOLON: ';';
COMMA: ',';
DOT: '.';
STAR: '*';
LPAREN: '(';
RPAREN: ')';
LBRACKET: '[';
RBRACKET: ']';
DIVIDE: '/';
MOD: '%';
ADD: '+';
SUBTRACT: '-';
BITAND: '&';
BITOR: '|';
BITXOR: '^';
BITNOT: '~';
EQUAL: '=';
NOT: '!';
LESSTHAN: '<';
GREATERTHAN: '>';
UNMATCHED_STRING_LITERAL: '"' | '\'' | '`';
NOTEQUAL: '!=';
//INTEGER_LITERAL: "INTEGER LITERAL";
//NUMERIC_OVERFLOW: "NUMERIC OVERFLOW";
//DECIMAL_LITERAL: "DECIMAL LITERAL";
//EMPTY_IDENT: "EMPTY IDENTIFIER";
//IDENT: "IDENTIFIER";
//STRING_LITERAL: "STRING LITERAL";
//COMMENTED_PLAN_HINT_START: "COMMENTED_PLAN_HINT_START";
//COMMENTED_PLAN_HINT_END: "COMMENTED_PLAN_HINT_END";
//UNEXPECTED_CHAR: "Unexpected character";


WS: [ \t\f\r\n] -> channel(HIDDEN);

COMMENT
    : ('--' | '//') ~[\r\n]* ('\r'? '\n' | EOF) -> channel(HIDDEN)
    ;

MULTILINE_COMMENT
    : '/*' .*? '*/' -> channel(HIDDEN)
    ;
